<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calm Hours - Time Tracker</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tone/14.7.77/Tone.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        /* Custom CSS for themes, animations, and overall feel */
        :root {
            --bg-primary: #F3EAD3;
            --bg-secondary: #FFFFFF;
            --text-primary: #4A4A4A;
            --text-secondary: #7A7A7A;
            --accent-primary: #86A8E7;
            --accent-secondary: #91EAE4;
            --shadow-color: rgba(0, 0, 0, 0.1);
        }

        body {
            font-family: 'Inter', sans-serif;
            background-color: var(--bg-primary);
            color: var(--text-primary);
            transition: background-color 0.5s ease, color 0.5s ease;
        }

        .card {
            background-color: var(--bg-secondary);
            border-radius: 1.5rem;
            box-shadow: 0 10px 25px -5px var(--shadow-color), 0 8px 10px -6px var(--shadow-color);
            transition: background-color 0.5s ease, box-shadow 0.5s ease;
        }

        .btn {
            border-radius: 0.75rem;
            transition: transform 0.2s ease, background-color 0.3s ease;
        }

        .btn:active {
            transform: scale(0.95);
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
            color: white;
        }
        
        .btn-secondary {
            background-color: var(--bg-secondary);
            border: 1px solid var(--accent-primary);
            color: var(--accent-primary);
        }
        
        .btn-danger {
            background-color: #E74C3C;
            color: white;
        }

        .input-field {
            background-color: var(--bg-primary);
            border: 1px solid transparent;
            border-radius: 0.75rem;
            transition: background-color 0.3s ease, border-color 0.3s ease;
            padding: 0.5rem 0.75rem;
            cursor: ns-resize;
        }

        .input-field:focus {
            outline: none;
            border-color: var(--accent-primary);
            background-color: var(--bg-secondary);
        }
        
        .toggle-bg:checked {
            background-color: var(--accent-primary);
        }

        /* Animated Backgrounds */
        .animated-gradient {
            background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);
            background-size: 400% 400%;
            animation: gradient 15s ease infinite;
        }

        @keyframes gradient {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        #particle-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            pointer-events: none;
        }

        .particle {
            position: absolute;
            border-radius: 50%;
            background: var(--accent-primary);
            opacity: 0.6;
            animation: float 25s infinite ease-in-out;
        }
        
        @keyframes float {
            0% { transform: translateY(0) translateX(0); }
            50% { transform: translateY(-100vh) translateX(50vw); }
            100% { transform: translateY(0) translateX(0); }
        }

        /* Modal & Notification Styles */
        .modal-backdrop {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 50;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.3s ease;
        }

        .modal-backdrop.active {
            opacity: 1;
            pointer-events: auto;
        }

        .modal-content {
            transform: scale(0.7);
            opacity: 0;
            transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1), opacity 0.2s ease-out;
        }
        
        .modal-backdrop.active .modal-content {
            transform: scale(1);
            opacity: 1;
        }

        #notification-toast {
            position: fixed;
            bottom: 1.25rem;
            right: 1.25rem;
            z-index: 100;
            opacity: 0;
            transform: translateY(2rem);
            transition: opacity 0.3s ease, transform 0.3s ease;
        }

        #notification-toast.show {
            opacity: 1;
            transform: translateY(0);
        }
    </style>
</head>
<body class="antialiased">

    <div id="particle-container"></div>

    <div class="min-h-screen p-4 sm:p-6 lg:p-8">
        <div class="max-w-5xl mx-auto">
            
            <!-- Header -->
            <header class="flex justify-between items-center mb-8">
                <h1 class="text-3xl font-bold tracking-tight text-primary">Calm Hours</h1>
                <button id="settings-btn" class="p-3 rounded-full hover:bg-black/10 transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="3"></circle><path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path></svg>
                </button>
            </header>

            <main class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                
                <!-- Left Column: Calendar and Summary -->
                <div class="lg:col-span-2 space-y-8">
                    <!-- Calendar -->
                    <div id="calendar-card" class="card p-6">
                        <div class="flex justify-between items-center mb-4">
                            <button id="prev-month-btn" class="p-2 rounded-full hover:bg-black/10 transition-colors">&lt;</button>
                            <h2 id="month-year-header" class="text-xl font-bold"></h2>
                            <button id="next-month-btn" class="p-2 rounded-full hover:bg-black/10 transition-colors">&gt;</button>
                        </div>
                        <div id="calendar-grid" class="grid grid-cols-7 gap-2 text-center">
                            <!-- Day names and dates will be injected here -->
                        </div>
                    </div>

                    <!-- Summary -->
                    <div class="card p-6">
                        <h3 class="text-lg font-semibold mb-4">Summary</h3>
                        <div class="grid grid-cols-1 sm:grid-cols-3 gap-4 text-center">
                            <div>
                                <p class="text-sm text-secondary">Today</p>
                                <p id="summary-today" class="text-2xl font-bold">0.00h</p>
                            </div>
                            <div>
                                <p class="text-sm text-secondary">Pay Period</p>
                                <p id="summary-pay-period" class="text-2xl font-bold">0.00h</p>
                            </div>
                            <div>
                                <p class="text-sm text-secondary">Total</p>
                                <p id="summary-total" class="text-2xl font-bold">0.00h</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Right Column: Time Display -->
                <div class="card p-6 h-fit">
                    <h3 class="text-lg font-semibold mb-2">Selected Day</h3>
                    <p id="display-selected-date" class="text-sm text-secondary mb-6">Select a date</p>
                    
                    <div id="time-display-area" class="space-y-4">
                        <div class="flex justify-between items-center">
                            <span class="font-medium">Time In:</span>
                            <span id="display-time-in" class="font-bold text-lg">--:--</span>
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="font-medium">Time Out:</span>
                            <span id="display-time-out" class="font-bold text-lg">--:--</span>
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="font-medium">Type:</span>
                            <span id="display-hour-type" class="font-bold text-lg">---</span>
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="font-medium">Additional:</span>
                            <span id="display-additional" class="font-bold text-lg">0.00h</span>
                        </div>
                        <hr class="my-4 border-dashed">
                        <div class="flex justify-between items-center">
                            <span class="font-bold text-lg">Total for Day:</span>
                            <span id="display-day-total" class="font-bold text-xl text-primary" style="color: var(--accent-primary);">0.00h</span>
                        </div>
                    </div>
                     <p id="no-hours-message" class="text-center text-secondary py-8 hidden">No hours logged for this day. Click a date to add an entry.</p>
                </div>
            </main>

        </div>
    </div>

    <!-- Time Entry Modal -->
    <div id="time-entry-modal" class="modal-backdrop">
        <div class="modal-content card w-full max-w-md m-4 p-6">
             <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold">Log Hours</h3>
                <button id="close-entry-modal-btn" class="p-2 rounded-full hover:bg-black/10 transition-colors">&times;</button>
            </div>
            <p id="modal-selected-date" class="text-sm text-secondary mb-6"></p>
            
            <div class="space-y-4">
                <div>
                    <label class="text-sm font-medium">Time In</label>
                    <input id="time-in" type="time" class="input-field w-full mt-1" step="900">
                </div>
                <div>
                    <label class="text-sm font-medium">Time Out</label>
                    <input id="time-out" type="time" class="input-field w-full mt-1" step="900">
                </div>

                <div class="flex items-center justify-between pt-2">
                    <span class="text-sm font-medium">Type</span>
                    <div class="relative inline-flex items-center cursor-pointer">
                        <input type="checkbox" id="hour-type-toggle" class="sr-only peer">
                        <div class="w-24 h-8 bg-gray-200 rounded-full peer peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-1 after:left-[4px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-6 after:w-14 after:transition-all dark:border-gray-600 toggle-bg"></div>
                        <span class="absolute text-xs font-semibold text-white left-3 top-1/2 -translate-y-1/2">CORE</span>
                        <span class="absolute text-xs font-semibold text-white right-3 top-1/2 -translate-y-1/2">ACAP</span>
                    </div>
                </div>
                
                <div>
                    <label class="text-sm font-medium">Additional Hours (optional)</label>
                    <input id="additional-hours" type="number" step="0.01" placeholder="e.g., 1.5" class="input-field w-full mt-1">
                </div>

                <button id="save-btn" class="btn btn-primary w-full py-3 font-bold">Save Hours</button>
            </div>
        </div>
    </div>

    <!-- Settings Modal -->
    <div id="settings-modal" class="modal-backdrop">
        <div class="modal-content card w-full max-w-md m-4 max-h-[90vh] overflow-y-auto p-6">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-bold">Settings</h2>
                <button id="close-settings-modal-btn" class="p-2 rounded-full hover:bg-black/10 transition-colors">&times;</button>
            </div>
            <div class="space-y-6">
                <!-- Settings content remains the same -->
                 <div><label for="theme-select" class="block text-sm font-medium mb-1">Color Theme</label><select id="theme-select" class="input-field w-full"></select></div>
                <div><label for="background-select" class="block text-sm font-medium mb-1">Animated Background</label><select id="background-select" class="input-field w-full"><option value="none">None</option><option value="gradient">Animated Gradient</option><option value="particles">Floating Particles</option></select></div>
                <div><label for="sound-select" class="block text-sm font-medium mb-1">Sound Theme</label><select id="sound-select" class="input-field w-full"><option value="default">Default</option><option value="calm">Calm</option><option value="digital">Digital</option><option value="none">None</option></select></div>
                <div><label for="pay-period-select" class="block text-sm font-medium mb-1">Pay Period</label><select id="pay-period-select" class="input-field w-full"><option value="7">Weekly</option><option value="14">Bi-Weekly</option><option value="15">Semi-Monthly</option><option value="30">Monthly</option></select></div>
                <button id="clear-data-btn" class="btn btn-danger w-full py-2">Clear All Data</button>
            </div>
        </div>
    </div>

    <!-- Confirmation Modal -->
    <div id="confirm-modal" class="modal-backdrop">
        <div class="modal-content card w-full max-w-sm m-4 p-6 text-center">
            <h3 id="confirm-message" class="text-lg font-medium mb-6">Are you sure?</h3>
            <div class="flex justify-center gap-4">
                <button id="confirm-cancel-btn" class="btn btn-secondary w-full py-2">Cancel</button>
                <button id="confirm-ok-btn" class="btn btn-danger w-full py-2">Confirm</button>
            </div>
        </div>
    </div>

    <!-- Notification Toast -->
    <div id="notification-toast" class="card py-3 px-5">
        <p id="notification-message"></p>
    </div>

    <script>
        window.onload = function() {
            // --- DOM ELEMENTS ---
            const calendarGrid = document.getElementById('calendar-grid');
            const monthYearHeader = document.getElementById('month-year-header');
            const prevMonthBtn = document.getElementById('prev-month-btn');
            const nextMonthBtn = document.getElementById('next-month-btn');
            const summaryToday = document.getElementById('summary-today');
            const summaryPayPeriod = document.getElementById('summary-pay-period');
            const summaryTotal = document.getElementById('summary-total');

            // Time Display Panel
            const displaySelectedDate = document.getElementById('display-selected-date');
            const displayTimeIn = document.getElementById('display-time-in');
            const displayTimeOut = document.getElementById('display-time-out');
            const displayHourType = document.getElementById('display-hour-type');
            const displayAdditional = document.getElementById('display-additional');
            const displayDayTotal = document.getElementById('display-day-total');
            const timeDisplayArea = document.getElementById('time-display-area');
            const noHoursMessage = document.getElementById('no-hours-message');

            // Time Entry Modal
            const timeEntryModal = document.getElementById('time-entry-modal');
            const closeEntryModalBtn = document.getElementById('close-entry-modal-btn');
            const modalSelectedDate = document.getElementById('modal-selected-date');
            const timeInInput = document.getElementById('time-in');
            const timeOutInput = document.getElementById('time-out');
            const hourTypeToggle = document.getElementById('hour-type-toggle');
            const additionalHoursInput = document.getElementById('additional-hours');
            const saveBtn = document.getElementById('save-btn');

            // Settings Modal
            const settingsBtn = document.getElementById('settings-btn');
            const closeSettingsModalBtn = document.getElementById('close-settings-modal-btn');
            const settingsModal = document.getElementById('settings-modal');
            const themeSelect = document.getElementById('theme-select');
            const backgroundSelect = document.getElementById('background-select');
            const soundSelect = document.getElementById('sound-select');
            const payPeriodSelect = document.getElementById('pay-period-select');
            const clearDataBtn = document.getElementById('clear-data-btn');

            // Confirmation Modal & Notification
            const confirmModal = document.getElementById('confirm-modal');
            const confirmMessage = document.getElementById('confirm-message');
            const confirmOkBtn = document.getElementById('confirm-ok-btn');
            const confirmCancelBtn = document.getElementById('confirm-cancel-btn');
            const notificationToast = document.getElementById('notification-toast');
            const notificationMessage = document.getElementById('notification-message');

            // --- STATE MANAGEMENT ---
            let currentDate = new Date();
            let selectedDate = null;
            let timeData = {};
            let settings = { theme: 'default', background: 'none', sound: 'default', payPeriod: 14 };
            let onConfirmCallback = null;
            let notificationTimeout;

            // --- SOUND SYNTHESIZER ---
            let synth;
            const soundPacks = {
                default: { click: 'C4', open: 'E4', close: 'A3', dial: 'C6', submit: ['G4', 'C5', 'E5'] },
                calm:    { click: 'C5', open: 'E5', close: 'A4', dial: 'C7', submit: ['G5', 'C6', 'E6'] },
                digital: { click: 'C6', open: 'E6', close: 'A5', dial: 'F#7', submit: ['A5', 'E6', 'A6'] },
            };

            async function playSound(type) {
                if (settings.sound === 'none' || typeof Tone === 'undefined') return;
                try {
                    if (Tone.context.state !== 'running') await Tone.start();
                    if (!synth) {
                        synth = new Tone.Synth({ oscillator: { type: 'sine' }, envelope: { attack: 0.005, decay: 0.1, sustain: 0.3, release: 1 } }).toDestination();
                    }
                    synth.triggerAttackRelease(soundPacks[settings.sound][type], '8n');
                } catch (e) { console.error("Could not play sound:", e); }
            }
            
            async function playSubmitJingle() {
                if (settings.sound === 'none' || typeof Tone === 'undefined') return;
                try {
                    if (Tone.context.state !== 'running') await Tone.start();
                    const notes = soundPacks[settings.sound].submit;
                    if (!synth) {
                        synth = new Tone.Synth({ oscillator: { type: 'sine' }, envelope: { attack: 0.005, decay: 0.1, sustain: 0.3, release: 1 } }).toDestination();
                    }
                    const now = Tone.now();
                    notes.forEach((note, i) => {
                        synth.triggerAttackRelease(note, "8n", now + i * 0.12);
                    });
                } catch (e) {
                    console.error("Could not play jingle:", e);
                }
            }

            // --- THEME & BACKGROUND MANAGEMENT ---
            const themes = {
                default: { '--bg-primary': '#F3EAD3', '--bg-secondary': '#FFFFFF', '--text-primary': '#4A4A4A', '--text-secondary': '#7A7A7A', '--accent-primary': '#86A8E7', '--accent-secondary': '#91EAE4' },
                'Oceanic': { '--bg-primary': '#0B2027', '--bg-secondary': '#12343B', '--text-primary': '#E0FBFC', '--text-secondary': '#96C5D9', '--accent-primary': '#3EF7B2', '--accent-secondary': '#00B4D8' },
                'Sakura': { '--bg-primary': '#F9F1F1', '--bg-secondary': '#FFFFFF', '--text-primary': '#5B4242', '--text-secondary': '#8D6E6E', '--accent-primary': '#FFB7C5', '--accent-secondary': '#E6A4B4' },
                'Forest': { '--bg-primary': '#E8F5E9', '--bg-secondary': '#FFFFFF', '--text-primary': '#2E7D32', '--text-secondary': '#66BB6A', '--accent-primary': '#4CAF50', '--accent-secondary': '#81C784' },
                'Dusk': { '--bg-primary': '#2C3E50', '--bg-secondary': '#34495E', '--text-primary': '#ECF0F1', '--text-secondary': '#BDC3C7', '--accent-primary': '#E74C3C', '--accent-secondary': '#F1C40F' },
                'Lavender': { '--bg-primary': '#E6E6FA', '--bg-secondary': '#FFFFFF', '--text-primary': '#483D8B', '--text-secondary': '#6A5ACD', '--accent-primary': '#9370DB', '--accent-secondary': '#BA55D3' },
            };
            function applyTheme(themeName) { const theme = themes[themeName]; if (!theme) return; Object.keys(theme).forEach(key => document.documentElement.style.setProperty(key, theme[key])); settings.theme = themeName; saveSettings(); }
            function populateThemeSelector() { Object.keys(themes).forEach(name => { const option = document.createElement('option'); option.value = name; option.textContent = name; themeSelect.appendChild(option); }); }
            function applyBackground(backgroundName) { document.body.classList.remove('animated-gradient'); document.getElementById('particle-container').innerHTML = ''; if (backgroundName === 'gradient') document.body.classList.add('animated-gradient'); else if (backgroundName === 'particles') createParticles(20); settings.background = backgroundName; saveSettings(); }
            function createParticles(count) { const container = document.getElementById('particle-container'); for (let i = 0; i < count; i++) { const p = document.createElement('div'); p.classList.add('particle'); const size = Math.random() * 10 + 5; p.style.width = `${size}px`; p.style.height = `${size}px`; p.style.left = `${Math.random() * 100}vw`; p.style.top = `${Math.random() * 100}vh`; p.style.animationDuration = `${Math.random() * 15 + 15}s`; p.style.animationDelay = `${Math.random() * -25}s`; container.appendChild(p); } }

            // --- CALENDAR LOGIC ---
            function renderCalendar() {
                calendarGrid.innerHTML = '';
                const month = currentDate.getMonth();
                const year = currentDate.getFullYear();
                monthYearHeader.textContent = `${currentDate.toLocaleString('default', { month: 'long' })} ${year}`;
                ['S', 'M', 'T', 'W', 'T', 'F', 'S'].forEach(day => { const dayEl = document.createElement('div'); dayEl.className = 'font-bold text-secondary text-sm'; dayEl.textContent = day; calendarGrid.appendChild(dayEl); });
                const firstDayOfMonth = new Date(year, month, 1).getDay();
                const daysInMonth = new Date(year, month + 1, 0).getDate();
                for (let i = 0; i < firstDayOfMonth; i++) calendarGrid.appendChild(document.createElement('div'));
                for (let day = 1; day <= daysInMonth; day++) {
                    const dayEl = document.createElement('button');
                    const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
                    dayEl.textContent = day;
                    dayEl.className = 'p-2 rounded-full transition-all duration-200 w-10 h-10 mx-auto flex items-center justify-center';
                    if (timeData[dateStr] && calculateHours(dateStr) > 0) { dayEl.classList.add('font-bold'); dayEl.style.backgroundColor = 'var(--accent-secondary)'; dayEl.style.color = 'white'; }
                    if (selectedDate === dateStr) { dayEl.classList.add('ring-2'); dayEl.style.borderColor = 'var(--accent-primary)'; }
                    const today = new Date();
                    if (day === today.getDate() && month === today.getMonth() && year === today.getFullYear()) { dayEl.classList.add('font-extrabold'); }
                    dayEl.addEventListener('click', () => openTimeEntryModal(dateStr));
                    calendarGrid.appendChild(dayEl);
                }
            }

            // --- TIME INPUT & ROUNDING ---
            function roundToNearestQuarterHour(timeString) { if (!timeString) return ''; const [hours, minutes] = timeString.split(':').map(Number); const totalMinutes = hours * 60 + minutes; const roundedMinutes = Math.round(totalMinutes / 15) * 15; const newHours = Math.floor(roundedMinutes / 60) % 24; const newMinutes = roundedMinutes % 60; return `${String(newHours).padStart(2, '0')}:${String(newMinutes).padStart(2, '0')}`; }
            function handleTimeInput(e) { e.target.value = roundToNearestQuarterHour(e.target.value); }
            function setupTimeInputListeners(inputElement) {
                inputElement.addEventListener('change', handleTimeInput);
                let startY = 0, isDragging = false;
                const handleSwipe = (e) => { if (!isDragging) return; e.preventDefault(); const currentY = e.touches ? e.touches[0].clientY : e.clientY; const deltaY = startY - currentY; if (Math.abs(deltaY) > 10) { const direction = deltaY > 0 ? 1 : -1; let [hours, minutes] = (inputElement.value || '00:00').split(':').map(Number); let totalMinutes = hours * 60 + minutes + (direction * 15); if (totalMinutes < 0) totalMinutes = 23 * 60 + 45; if (totalMinutes >= 24 * 60) totalMinutes = 0; const newHours = Math.floor(totalMinutes / 60); const newMinutes = totalMinutes % 60; inputElement.value = `${String(newHours).padStart(2, '0')}:${String(newMinutes).padStart(2, '0')}`; startY = currentY; playSound('dial'); } };
                const stopSwipe = () => { isDragging = false; window.removeEventListener('mousemove', handleSwipe); window.removeEventListener('mouseup', stopSwipe); window.removeEventListener('touchmove', handleSwipe); window.removeEventListener('touchend', stopSwipe); };
                inputElement.addEventListener('mousedown', (e) => { isDragging = true; startY = e.clientY; window.addEventListener('mousemove', handleSwipe); window.addEventListener('mouseup', stopSwipe); });
                inputElement.addEventListener('touchstart', (e) => { isDragging = true; startY = e.touches[0].clientY; window.addEventListener('touchmove', handleSwipe); window.addEventListener('touchend', stopSwipe); });
            }

            // --- UI & DATA FLOW ---
            function openTimeEntryModal(dateStr) {
                playSound('open');
                selectedDate = dateStr;
                updateDisplayPanel(dateStr);
                loadEntryForModal(dateStr);
                renderCalendar(); // Re-render to show selection ring
                timeEntryModal.classList.add('active');
            }

            function closeTimeEntryModal() {
                timeEntryModal.classList.remove('active');
                playSound('close');
            }

            function updateDisplayPanel(dateStr) {
                const entry = timeData[dateStr];
                const dateObj = new Date(`${dateStr}T00:00:00`);
                displaySelectedDate.textContent = dateObj.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });

                if (entry && calculateHours(dateStr) > 0) {
                    displayTimeIn.textContent = entry.in || '--:--';
                    displayTimeOut.textContent = entry.out || '--:--';
                    displayHourType.textContent = entry.type || '---';
                    displayAdditional.textContent = `${(entry.additional || 0).toFixed(2)}h`;
                    displayDayTotal.textContent = `${calculateHours(dateStr).toFixed(2)}h`;
                    timeDisplayArea.classList.remove('hidden');
                    noHoursMessage.classList.add('hidden');
                } else {
                    timeDisplayArea.classList.add('hidden');
                    noHoursMessage.classList.remove('hidden');
                }
            }

            function loadEntryForModal(dateStr) {
                const entry = timeData[dateStr];
                const dateObj = new Date(`${dateStr}T00:00:00`);
                modalSelectedDate.textContent = dateObj.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });
                timeInInput.value = entry?.in || '';
                timeOutInput.value = entry?.out || '';
                hourTypeToggle.checked = entry?.type === 'ACAP';
                additionalHoursInput.value = entry?.additional || '';
            }

            function saveEntry() {
                if (!selectedDate) return;
                
                playSubmitJingle();
                showNotification('Hours saved!');

                timeData[selectedDate] = { in: timeInInput.value, out: timeOutInput.value, type: hourTypeToggle.checked ? 'ACAP' : 'CORE', additional: parseFloat(additionalHoursInput.value) || 0 };
                saveData();
                renderCalendar();
                updateSummaries();
                updateDisplayPanel(selectedDate);
                
                setTimeout(closeTimeEntryModal, 400); 
            }
            
            function calculateHours(dateStr) {
                const entry = timeData[dateStr];
                if (!entry) return 0;
                let duration = 0;
                if (entry.in && entry.out) { const timeIn = new Date(`${dateStr}T${entry.in}`); const timeOut = new Date(`${dateStr}T${entry.out}`); if (timeOut > timeIn) duration = (timeOut - timeIn) / 3600000; }
                return duration + (entry.additional || 0);
            }

            function updateSummaries() {
                const today = new Date();
                const todayStr = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;
                summaryToday.textContent = `${calculateHours(todayStr).toFixed(2)}h`;
                const totalHours = Object.keys(timeData).reduce((acc, date) => acc + calculateHours(date), 0);
                summaryTotal.textContent = `${totalHours.toFixed(2)}h`;
                let periodHours = 0;
                for (let i = 0; i < settings.payPeriod; i++) { const date = new Date(); date.setDate(date.getDate() - i); const dateStr = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`; periodHours += calculateHours(dateStr); }
                summaryPayPeriod.textContent = `${periodHours.toFixed(2)}h`;
            }
            
            // --- MODALS, NOTIFICATIONS, STORAGE ---
            function showNotification(message) { clearTimeout(notificationTimeout); notificationMessage.textContent = message; notificationToast.classList.add('show'); notificationTimeout = setTimeout(() => notificationToast.classList.remove('show'), 3000); }
            function showConfirm(message, onConfirm) { playSound('open'); confirmMessage.textContent = message; onConfirmCallback = onConfirm; confirmModal.classList.add('active'); }
            function saveData() { localStorage.setItem('timeTrackerData', JSON.stringify(timeData)); }
            function loadData() { const d = localStorage.getItem('timeTrackerData'); if (d) timeData = JSON.parse(d); }
            function saveSettings() { localStorage.setItem('timeTrackerSettings', JSON.stringify(settings)); }
            function loadSettings() { const s = localStorage.getItem('timeTrackerSettings'); if (s) settings = JSON.parse(s); }
            function clearAllData() { showConfirm('Delete all time entries? This cannot be undone.', () => { timeData = {}; saveData(); renderCalendar(); updateSummaries(); updateDisplayPanel(selectedDate); playSound('close'); showNotification('All data cleared.'); }); }

            // --- EVENT LISTENERS ---
            prevMonthBtn.addEventListener('click', () => { currentDate.setMonth(currentDate.getMonth() - 1); renderCalendar(); playSound('click'); });
            nextMonthBtn.addEventListener('click', () => { currentDate.setMonth(currentDate.getMonth() + 1); renderCalendar(); playSound('click'); });
            saveBtn.addEventListener('click', saveEntry);
            closeEntryModalBtn.addEventListener('click', closeTimeEntryModal);
            settingsBtn.addEventListener('click', () => { settingsModal.classList.add('active'); playSound('open'); });
            closeSettingsModalBtn.addEventListener('click', () => { settingsModal.classList.remove('active'); playSound('close'); });
            confirmOkBtn.addEventListener('click', () => { if (onConfirmCallback) onConfirmCallback(); confirmModal.classList.remove('active'); onConfirmCallback = null; });
            confirmCancelBtn.addEventListener('click', () => { confirmModal.classList.remove('active'); onConfirmCallback = null; playSound('close'); });
            themeSelect.addEventListener('change', e => applyTheme(e.target.value));
            backgroundSelect.addEventListener('change', e => applyBackground(e.target.value));
            soundSelect.addEventListener('change', e => { settings.sound = e.target.value; saveSettings(); playSound('click'); });
            payPeriodSelect.addEventListener('change', e => { settings.payPeriod = parseInt(e.target.value, 10); saveSettings(); updateSummaries(); playSound('click'); });
            clearDataBtn.addEventListener('click', clearAllData);
            
            // --- INITIALIZATION ---
            function init() {
                loadSettings();
                loadData();
                populateThemeSelector();
                themeSelect.value = settings.theme;
                applyTheme(settings.theme);
                backgroundSelect.value = settings.background;
                applyBackground(settings.background);
                soundSelect.value = settings.sound;
                payPeriodSelect.value = settings.payPeriod;

                const today = new Date();
                const todayStr = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;
                selectedDate = todayStr;

                renderCalendar();
                updateDisplayPanel(selectedDate);
                updateSummaries();

                setupTimeInputListeners(timeInInput);
                setupTimeInputListeners(timeOutInput);
            }

            init();
        };
    </script>
</body>
</html>
